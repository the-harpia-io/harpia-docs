"use strict";(self.webpackChunkharpia_docs=self.webpackChunkharpia_docs||[]).push([[1267],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>f});var r=a(7294);function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function n(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?n(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,r,i=function(t,e){if(null==t)return{};var a,r,i={},n=Object.keys(t);for(r=0;r<n.length;r++)a=n[r],e.indexOf(a)>=0||(i[a]=t[a]);return i}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(r=0;r<n.length;r++)a=n[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(i[a]=t[a])}return i}var s=r.createContext({}),c=function(t){var e=r.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},p=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},h="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var a=t.components,i=t.mdxType,n=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),h=c(a),u=i,f=h["".concat(s,".").concat(u)]||h[u]||m[u]||n;return a?r.createElement(f,o(o({ref:e},p),{},{components:a})):r.createElement(f,o({ref:e},p))}));function f(t,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var n=a.length,o=new Array(n);o[0]=u;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[h]="string"==typeof t?t:i,o[1]=l;for(var c=2;c<n;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1482:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var r=a(7462),i=(a(7294),a(3905));const n={sidebar_position:9},o="Platform Architecture",l={unversionedId:"platform-architecture",id:"platform-architecture",title:"Platform Architecture",description:"Harp Platform is based on distributed microservice infrastructure.",source:"@site/docs/platform-architecture.md",sourceDirName:".",slug:"/platform-architecture",permalink:"/docs/platform-architecture",draft:!1,editUrl:"https://github.com/the-harpia-io/harpia-docs/tree/master/docs/platform-architecture.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Platform Health",permalink:"/docs/status-page-overview"},next:{title:"Collaboration",permalink:"/docs/collaboration"}},s={},c=[{value:"Services Architecture",id:"services-architecture",level:2},{value:"Technical flow to process alerts",id:"technical-flow-to-process-alerts",level:2},{value:"Additional Services",id:"additional-services",level:2},{value:"Platform Monitoring",id:"platform-monitoring",level:2}],p={toc:c};function h(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"platform-architecture"},"Platform Architecture"),(0,i.kt)("p",null,"Harp Platform is based on distributed microservice infrastructure."),(0,i.kt)("h2",{id:"services-architecture"},"Services Architecture"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"harp-architecture.drawio.svg",src:a(4137).Z,width:"1795",height:"953"})),(0,i.kt)("h2",{id:"technical-flow-to-process-alerts"},"Technical flow to process alerts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-collectors"},"harp-collectors"),": receive alerts from monitoring system, unify the structure and push them to Kafka topic"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-alert-decorator"},"harp-alert-decorator"),": read alert from Kafka topic (produced by harp-collectors) and add additional info about environments and scenarios that should be applied to the alert"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/the-harpia-io/harp-daemon"},"harp-daemon"),": read alert from Kafka topic (produced by harp-alert-decorator), describe the logic and state of the alert and write result to MariaDB"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-aggregator"},"harp-aggregator"),": read alerts from MariaDB, aggregate it and send to Aerospike"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-bridge"},"harp-bridge"),": read alerts from Aerospike and send to UI via websockets"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-ui"},"harp-ui"),": the main user interface of the platform")),(0,i.kt)("h2",{id:"additional-services"},"Additional Services"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-filters"},"harp-filters"),": create and manage the user specific filters in UI"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-actions"},"harp-actions"),": manage alerts - handle, snooze, acknowledge"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-environments"},"harp-environments"),": create and manage environments"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-bots"},"harp-bots"),": configure your own bots to send auto notifications to different channels - Email, SMS, Slack etc.."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-integrations"},"harp-integrations"),": create and manage the integrations with your monitoring systems"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-licenses"},"harp-licenses"),": monitor the usage of the alerts and notification channels"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-scenarios"},"harp-scenarios"),": create and manage scenarios for alerts"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-users"},"harp-users"),": create and manage users inside platform including authentication and authorization"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-notifications-gmail"},"harp-notifications-gmail"),": responsible to send auto email notifications"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-notifications-msteams"},"harp-notifications-msteams"),": responsible to send auto notifications to Microsoft Teams"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-notifications-slack"},"harp-notifications-slack"),": responsible to send auto notifications to Slack channel"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-notifications-sms"},"harp-notifications-sms"),": responsible for creating auto SMS notifications via Twilio integration"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-notifications-telegram"},"harp-notifications-telegram"),": responsible to send auto notifications to Telegram channels"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-notifications-voice"},"harp-notifications-voice"),": responsible for creating auto Phone Calls via Twilio integration"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/harpia-io/harp-clientevents"},"harp-clientevents"),": receive and analyze metrics from the frontend")),(0,i.kt)("h2",{id:"platform-monitoring"},"Platform Monitoring"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Prometheus metrics in VictoriaMetrics"),(0,i.kt)("li",{parentName:"ul"},"Traces in Grafana Tempo"),(0,i.kt)("li",{parentName:"ul"},"Logs in Grafana Loki"),(0,i.kt)("li",{parentName:"ul"},"Dashboards and Alerts in Grafana")))}h.isMDXComponent=!0},4137:(t,e,a)=>{a.d(e,{Z:()=>r});const r=a.p+"assets/images/harp-architecture.drawio-395fe7ca0dd5fbd2196e77ee26f05f9f.svg"}}]);